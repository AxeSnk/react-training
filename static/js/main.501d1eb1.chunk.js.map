{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","Loader.js","Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","padding","border","borderRadius","marginBottom","input","marginRight","TodoItem","todo","index","onChange","removeTodo","useContext","classes","completed","push","style","className","join","type","checked","id","title","onClick","bind","ul","listStyle","margin","TodoList","props","todos","map","key","onToggle","Modal","state","isOpen","Fragment","setState","this","Component","AddTodo","lazy","App","useState","setTodos","loading","setLoading","useEffect","fetch","then","response","json","setTimeout","Provider","value","filter","Suspense","fallback","onCreate","concat","Date","now","Loader","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.501d1eb1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;","import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Context from '../context';\r\n\r\nconst styles = {\r\n\tli: {\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: 'space-between',\r\n\t\talignItems: 'center',\r\n\t\tpadding: '.5rem 1rem',\r\n\t\tborder: '1px solid #ccc',\r\n\t\tborderRadius: '4px',\r\n\t\tmarginBottom: '.5rem'\r\n\t},\r\n\tinput: {\r\n\t\tmarginRight: '1rem'\r\n\t}\r\n}\r\n\r\nfunction TodoItem({ todo, index, onChange }) {\r\n\tconst { removeTodo } = useContext(Context)\r\n\tconst classes = []\r\n\r\n\tif (todo.completed) {\r\n\t\tclasses.push('done')\r\n\t}\r\n\r\n\treturn (\r\n\t\t<li style={styles.li}>\r\n\t\t\t<span className={classes.join(' ')}>\r\n\t\t\t\t<input \r\n\t\t\t\t\ttype='checkbox'\r\n\t\t\t\t\tchecked={todo.completed} \r\n\t\t\t\t\tstyle={styles.input} \r\n\t\t\t\t\tonChange={() => onChange(todo.id)}\r\n\t\t\t\t/>\r\n\t\t\t\t<strong>{index + 1}</strong>\r\n\t\t\t\t&nbsp;\r\n\t\t\t\t{todo.title}\r\n\t\t\t</span>\r\n\r\n\t\t\t<button className='rm' onClick={removeTodo.bind(null, todo.id)}>&times;</button>\r\n\t\t</li>\r\n\t)\r\n}\r\n\r\nTodoItem.propTypes = {\r\n\ttodo: PropTypes.object.isRequired,\r\n\tindex: PropTypes.number,\r\n\tonChange: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoItem","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TodoItem from './TodoItem';\r\n\r\nconst styles = {\r\n\tul: {\r\n\t\tlistStyle: 'none',\r\n\t\tmargin: 0,\r\n\t\tpadding: 0\r\n\t}\r\n}\r\n\r\nfunction TodoList(props) {\r\n\treturn (\r\n\t\t<ul style={styles.ul}>\r\n\t\t\t{ props.todos.map((todo, index) => {\r\n\t\t\t\treturn <TodoItem todo={todo} key={todo.id} index={index} onChange={props.onToggle} />\r\n\t\t\t}) }\r\n\t\t</ul>\r\n\t)\r\n}\r\n\r\nTodoList.propTypes = {\r\n\ttodos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n\tonToggle: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoList","import React from 'react'\r\n\r\nexport default () => <div style={{display: 'flex', justifyContent: 'center', margin: '.5rem'}}><div className=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>","import React from 'react';\r\nimport './Modal.css';\r\n\r\nexport default class Modal extends React.Component {\r\n\tstate = {\r\n\t\tisOpen: false\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<button onClick={() => this.setState({isOpen: true})}>Open modal</button>\r\n\r\n\t\t\t\t{this.state.isOpen && <div className='modal'>\r\n\t\t\t\t\t\t<div className='modal-body'>\r\n\t\t\t\t\t\t\t<h1>Modal title</h1>\r\n\t\t\t\t\t\t\t<p>I am awesome modal!</p>\r\n\t\t\t\t\t\t\t<button onClick={() => this.setState({isOpen: false})}>Close modal</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t</div>}\r\n\t\t\t</React.Fragment>\r\n\r\n\t\t)\r\n\t}\r\n}","import React, {useEffect} from 'react';\r\nimport TodoList from './Todo/TodoList';\r\nimport Context from './context';\r\nimport Loader from './Loader';\r\nimport Modal from './Modal/Modal'\r\n\r\nconst AddTodo = React.lazy(() => import('./Todo/AddTodo'))\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = React.useState([\r\n    // {id: 1, completed: false, title: 'Купить хлеб'},\r\n    // {id: 2, completed: true, title: 'Купить масло'},\r\n    // {id: 3, completed: false, title: 'Купить молоко'}\r\n  ])\r\n  const [loading, setLoading] = React.useState(true)\r\n\r\n  useEffect(() => {\r\n    fetch('https://jsonplaceholder.typicode.com/todos?_limit=5')\r\n      .then(response => response.json())\r\n      .then(todos => {\r\n        setTimeout(() => {\r\n          setTodos(todos)\r\n          setLoading(false)\r\n        }, 2000)\r\n      })\r\n  }, [])\r\n\r\n  function toggleTodo(id) {\r\n    setTodos(\r\n      todos.map(todo => {\r\n        if (todo.id === id) {\r\n          todo.completed = !todo.completed\r\n        }\r\n        return todo\r\n      })\r\n    )\r\n  }\r\n\r\n  function removeTodo(id) {\r\n    setTodos(todos.filter(todo => todo.id !== id))\r\n  }\r\n\r\n  function addTodo(title) {\r\n    setTodos(todos.concat([\r\n      {\r\n        title,\r\n        id: Date.now(),\r\n        completed: false\r\n      }\r\n    ])\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Context.Provider value={{ removeTodo }}>\r\n      <div className='wrapper'>\r\n        <h1>React training</h1>\r\n        <Modal />\r\n\r\n        <React.Suspense fallback={<p>Loading...</p>}>\r\n          <AddTodo onCreate={addTodo} />\r\n        </React.Suspense>\r\n\r\n        {loading && <Loader />}\r\n        {todos.length ? (\r\n          <TodoList todos={todos} onToggle={toggleTodo} />\r\n        ) : (\r\n          loading ? null : <p>No todos!</p>\r\n        )}\r\n\r\n      </div>\r\n    </Context.Provider>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}